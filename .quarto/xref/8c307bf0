{"entries":[],"headings":["introduction-to-reactjs","what-is-reactjs","the-react-ecosystem","setting-up-the-development-environment","creating-your-first-react-application","understanding-components","jsx-javascript-xml-syntax","react-component-hierarchy","virtual-dom-and-reconciliation","component-state-and-props","lets-create-react-app-with-cra","folder-structure","commands","lets-understand-how-it-works","react-component","try-it","react-component-fundamentals","lifecycle-methods","handling-events","conditional-rendering","lists-and-keys","forms-and-controlled-components","what-is-jsx","why-use-jsx","jsx-syntax","jsx-and-javascript","jsx-elements","conditional-rendering-with-jsx","mapping-and-lists-with-jsx","jsx-and-events","jsx-and-components","example","understanding-nested-components","real-world-example-itunes-music-search-app","app-component","searchbar-component","searchresults-component","nested-component-interaction","benefits-of-nested-components","real-world-applications","react-components","component-structure","what-is-jsx-1","rules","examples","accessing-dynamic-data-in-jsx","what-are-props","example-component","default-props","what-is-state","example-class-component","modifying-state","example-class-component-with-state-modification","props-vs.-state","lets-greet-by-name","styling-in-react","understanding-styling-in-react","traditional-css","css-modules","styled-components","styling-in-react-best-practices","styling-example-css-modules","styling-example-styled-components","state-management-with-redux","what-is-redux","key-concepts","redux-workflow","setting-up-redux","actions","reducers","dispatching-actions","connect-components-to-redux","middleware-in-redux","combining-reducers","actions-with-async-operations","redux-devtools","what-is-redux-toolkit","key-features-of-redux-toolkit","setting-up-redux-toolkit","actions-with-redux-toolkit","selectors-with-redux-toolkit","middleware-in-redux-toolkit","example-1","summary","building-an-itunes-search-app-with-redux-toolkit","step-1-project-setup","step-2-define-a-slice","searchslice.js","step-3-create-the-redux-store","store.js","step-4-set-up-the-search-component","search.js","step-5-define-an-async-action","searchslice.js-1","step-6-handle-async-action-results","searchslice.js-2","step-7-display-search-results","results.js","step-8-integrate-components","app.js","routing-in-react","introduction-to-routing","react-router","setting-up-react-router","basic-routing","example-2","linking-between-routes","example-3","route-parameters","example-4","nested-routes","example-5","redirects","example-6","route-guards","example-7","route-animation","example-8","route-data-fetching","example-9","summary-1","unit-testing-and-jest","what-is-unit-testing","what-is-jest","writing-your-first-jest-test","writing-test-suites-and-test-cases","using-jests-expect-for-assertions","running-and-organizing-tests","basic-matchers-and-matchers-api","detailed-explanation-of-matchers","testing-react-components","rendering-components-for-testing","assertions-on-react-components","common-assertions","testing-component-props-and-state","testing-state","importance-of-mocking-in-unit-testing","using-jest-mocks-for-functions-and-modules","mocking-a-module","handling-asynchronous-code-with-mocks","mocking-api-calls-and-third-party-libraries","testing-asynchronous-operations-with-asyncawait","handling-promises-in-tests","testing-timeouts-and-delays","simulating-async-behavior-with-jest","resetting-spies-and-mocks"]}